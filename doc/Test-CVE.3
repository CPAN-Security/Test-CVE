.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "Test::CVE 3"
.TH Test::CVE 3 2025-05-04 "perl v5.40.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test::CVE \- Test against known CVE\*(Aqs
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& use Test::CVE;
\&
\& my $cve = Test::CVE\->new (
\&    verbose  => 0,
\&    deps     => 1,
\&    perl     => 1,
\&    core     => 1,
\&    minimum  => 0,
\&    cpansa   => "https://cpan\-security.github.io/cpansa\-feed/cpansa.json",
\&    cpanfile => "cpanfile",
\&    meta_jsn => "META.json",
\&    meta_yml => "META.yml",     # NYI
\&    make_pl  => "Makefile.PL",
\&    build_pl => "Build.PL",     # NYI
\&    want     => [],
\&    skip     => "CVE.SKIP",
\&    );
\&
\& $cve\->skip ("CVE.SKIP");
\& $cve\->skip ([qw( CVE\-2011\-0123 CVE\-2020\-1234 )]);
\&
\& $cve\->want ("Foo::Bar", "4.321");
\& $cve\->want ("ExtUtils\-MakeMaker");
\&
\& $cve\->test;
\& print $cve\->report (width => $ENV{COLUMNS} || 80);
\& my $csv = $cve\->csv;
\&
\& has_no_cves (....);
.Ve
.SH INCENTIVE
.IX Header "INCENTIVE"
On the Perl Toolchain Summit 2023, the CPAN Security Working Group (CPAN\-SEC)
was established to receive and handle reports of undisclosed vulnerabilities
for CPAN releases and to assist the community in dealing with those.
.PP
The resources available enabled passive checks to existing releases and single
files against the database with known vulnerabilities.
.PP
The goal of this module is to be able to check if known vulnerabilities exist
before the release would be uploaded to CPAN.
.PP
The analysis is based on declarations and/or actual use and supports three
levels: \f(CW\*(C`requires\*(C'\fR, \f(CW\*(C`recommends\*(C'\fR, and \f(CW\*(C`suggests\*(C'\fR. \f(CW\*(C`suggests\*(C'\fR is unused in
giving advice.
.PP
The functionality explicitly limits to passive analysis: the is no active
scanning of source code to find security vulnerabilities.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Test::CVE provides functionality to test a (CPAN)release or a single (perl)
script against known CVE\*(Aqs
.PP
It enables checking the current release only or include its prereqs too.
.SS "Functions and methods"
.IX Subsection "Functions and methods"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 10
\& my $cve = Test::CVE\->new (
\&    verbose  => 0,
\&    deps     => 1,
\&    minimum  => 0,
\&    cpansa   => "https://cpan\-security.github.io/cpansa\-feed/cpansa.json",
\&    make_pl  => "Makefile.PL",
\&    cpanfile => "cpanfile",
\&    want     => [],
\&    skip     => "CVE.SKIP",
\&    );
.Ve
.PP
verbose
.IX Subsection "verbose"
.PP
Set verbosity level. This will report what files are opened and read and what
modules are taken into account. Higher verbose will show more. Default = \f(CW0\fR.
.PP
deps
.IX Subsection "deps"
.PP
Select if CVE\*(Aqs are also checked for direct dependencies. Default is true. If
false, just check the module or release itself.
.PP
perl
.IX Subsection "perl"
.PP
Select if CVE\*(Aqs on perl itself are included in the report. Default is true.
.PP
core
.IX Subsection "core"
.PP
Replace unspecified versions of CORE modules with the version as shipped by
the required perl if known.
.PP
.Vb 1
\& require "ExtUtils::MakeMaker"; # no version specified
.Ve
.PP
will set the required version to "6.66" when minimum perl is 5.18.1.
.PP
minimum
.IX Subsection "minimum"
.PP
Report all CVE\*(Aqs regardless of what version is recommended in \f(CW\*(C`cpanfile\*(C'\fR or
\&\f(CW\*(C`MYMETA.json\*(C'\fR. By default only CVE\*(Aqs newer than the recommended version per
dependency are reported.
.PP
cpansa
.IX Subsection "cpansa"
.PP
Pass the URL of the CPANSA database. The alternative is to pass the filename
of a stored version of that database.
.PP
make_pl
.IX Subsection "make_pl"
.PP
Pass an alternative location of \f(CW\*(C`Makefile.PL\*(C'\fR. Default is the one in the
current directory.
.PP
In version \f(CW0.01\fR \f(CW\*(C`Build.PL\*(C'\fR is not yet supported.
.PP
cpanfile
.IX Subsection "cpanfile"
.PP
Pass an alternative location for \f(CW\*(C`cpanfile\*(C'\fR. Very useful when testing.
.PP
want
.IX Subsection "want"
.PP
A list of extra prereqs. When you know in advance, pass the list in this
attribute. You can also add them to the object with the method later. This
attribute does not support versions, the method does.
.PP
skip
.IX Subsection "skip"
.PP
An optional specification of CVE\*(Aqs to skip/ignore. See "skip".
.PP
\fIrequire\fR
.IX Subsection "require"
.PP
.Vb 3
\& my $cve = Test::CVE\->new ();
\& $cve\->require ("Foo::Bar");
\& $cve\->require ("Baz\-Fumble", "4.321");
.Ve
.PP
Add a dependency to the list. Only adds the dependency if known CVE\*(Aqs exist.
.PP
\fIset_meta\fR
.IX Subsection "set_meta"
.PP
.Vb 2
\& $cve\->set_meta ("Fooble.pl");
\& $cve\->set_meta ("script.pl", "0.01");
.Ve
.PP
Force set distribution information, preventing reading \f(CW\*(C`Makefile.PL\*(C'\fR and/or
\&\f(CW\*(C`cpanfile\*(C'\fR.
.PP
\fIskip\fR
.IX Xref "skip"
.IX Subsection "skip"
.PP
.Vb 6
\& my @skip = $cve\->skip;
\& $cve\->skip (undef);
\& $cve\->skip ("CVE.SKIP");
\& $cve\->skip ("CVE\-2011\-0123", "CVE\-2022\-1234");
\& $cve\->skip ([qw( CVE\-2011\-0123 CVE\-2020\-1234 )]);
\& $cve\->skip ({ "CVE\-2013\-2222" => "We do not use this" });
.Ve
.PP
By default all CVE\*(Aqs listed in file \f(CW\*(C`CVE.SKIP\*(C'\fR will be ignored in the reports.
.PP
When no argument is given, the current list of ignored CVE\*(Aqs is returned as
an array\-ref.
.PP
When the only argument is the name of a readable file, the file is expected to
have one tag per line of a CVE to be ignored, optionally followed by space and
a reason:
.PP
.Vb 2
\&  CVE\-2011\-0123   We are not using this feature
\&  CVE\-2020\-1234
.Ve
.PP
When the only argument is an array\-ref, all entries are ignored.
.PP
When the only argument is a hash\-ref, all keys are ignored.
.PP
Otherwise, all arguments are ignored.
.PP
Future extensions might read VEX <https://github.com/openvex/spec>
specifications (too).
.PP
\fItest\fR
.IX Subsection "test"
.PP
Execute the test. Files are read as needed.
.PP
\fIreport\fR
.IX Subsection "report"
.PP
Report the test\-results in plain text. This method prints the CVE\*(Aqs. If you
want the results for further analysis, use \f(CW\*(C`cve\*(C'\fR.
.PP
\fIcve\fR
.IX Subsection "cve"
.PP
Return a list of found CVE\*(Aqs per release. The format will be somewhat like
.PP
.Vb 10
\& [ { release => "Some\-Module",
\&     vsn     => "0.45",
\&     cve     => [
\&       { av  => [ "<1.23" ],
\&         cid => "CPANSA\-Some\-Module\-2023\-01",
\&         cve => [ "CVE\-2023\-1234" ],
\&         dsc => "Removes all files in /tmp",
\&         dte => "2023\-01\-02",
\&         sev => "critical",
\&         },
\&       ...
\&       ],
\&     },
\&   ...
\&   ]
.Ve
.PP
release
.IX Subsection "release"
.PP
The name of the release
.PP
vsn
.IX Subsection "vsn"
.PP
The version that was checked
.PP
cve
.IX Subsection "cve"
.PP
The list of found CVE\*(Aqs for this release that match the criteria
.IP av 2
.IX Item "av"
All affected versions of the release
.IP cid 2
.IX Item "cid"
The ID from the CPANSA database
.IP cve 2
.IX Item "cve"
The list of CVE tags for this item. This list can be empty.
.IP dsc 2
.IX Item "dsc"
Description of the vulnerability
.IP dte 2
.IX Item "dte"
Date for this CVE
.IP sev 2
.IX Item "sev"
Severity. Most entries doe not have a severity
.PP
\fIhas_no_cves\fR
.IX Subsection "has_no_cves"
.PP
.Vb 2
\& use Test::More;
\& use Test::CVE;
\&
\& has_no_cves ();
\& done_testing;
.Ve
.PP
Will return \f(CW\*(C`ok\*(C'\fR is no open CVE\*(Aqs are detected for the current build
environment.
.PP
\&\f(CW\*(C`has_no_cves\*(C'\fR will accept all arguments that \f(CW\*(C`new\*(C'\fR accepts plus one
additional: \f(CW\*(C`author\*(C'\fR. The \f(CW\*(C`perl\*(C'\fR attribute defaults to \f(CW0\fR.
.PP
.Vb 1
\& has_no_cves (@args);
.Ve
.PP
is more or less the same as
.PP
.Vb 3
\& my @cve = Test::CVE\->new (@args)\->test\->cve;
\& ok (@cve == 0, "This release found no open CVEs");
\& diag ("...") for map { ... } @cve;
.Ve
.PP
By default, \f(CW\*(C`has_no_cves\*(C'\fR will only run in a development environment,
but you can control that with the \f(CW\*(C`author\*(C'\fR attribute. When not passed,
it will default to \f(CW1\fR if either the test unit is run from the \f(CW\*(C`xt/\*(C'\fR
folder or if filder \f(CW\*(C`.git\*(C'\fR exists and the invoking perl has no version
extension in its name.
.SH "TODO and IDEAS"
.IX Header "TODO and IDEAS"
.IP \(bu 2
Support SLSA <https://slsa.dev/spec/v0.1/> documents
.IP \(bu 2
Support VEX <https://github.com/openvex/spec> documents
.SH AUTHOR
.IX Header "AUTHOR"
H.Merijn Brand \fI<hmbrand@cpan.org>\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::CVE, Net::NVD, Net::OSV
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
.Vb 1
\& Copyright (C) 2023\-2025 H.Merijn Brand.  All rights reserved.
.Ve
.PP
This library is free software;  you can redistribute and/or modify it under
the same terms as Perl itself.
