.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 2023-05-05 "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
.Vb 1
\& Test::CVE \- Test against known CVE\*(Aqs
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& use Test::CVE;
\&
\& my $cve = Test::CVE\->new (
\&    verbose  => 0,
\&    deps     => 1,
\&    minimum  => 0,
\&    cpansa   => "https://hackeriet.github.io/cpansa\-feed/cpansa.json",
\&    make_pl  => "Makefile.PL",
\&    cpanfile => "cpanfile",
\&    want     => [],
\&    );
\&
\& $cve\->test;
\& print $cve\->report (width => $ENV{COLUMNS} || 80);
\& my $csv = $cve\->csv;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Test::CVE provides functionality to test a release against known CVE's
.PP
It enables checking the current release only or include its prereqs too.
.SS "Functions and methods"
.IX Subsection "Functions and methods"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 9
\& my $cve = Test::CVE\->new (
\&    verbose  => 0,
\&    deps     => 1,
\&    minimum  => 0,
\&    cpansa   => "https://hackeriet.github.io/cpansa\-feed/cpansa.json",
\&    make_pl  => "Makefile.PL",
\&    cpanfile => "cpanfile",
\&    want     => [],
\&    );
.Ve
.PP
verbose
.IX Subsection "verbose"
.PP
Set verbosity level. This will report what files are opened and read and what
modules are taken into account. Higher verbose will show more. Default = \f(CW0\fR.
.PP
deps
.IX Subsection "deps"
.PP
Select if CVE's are also checked for direct dependencies. Default is true. If
false, just check the module or release itself.
.PP
minimum
.IX Subsection "minimum"
.PP
Report all CVE's regardless of what version is recommended in \f(CW\*(C`cpanfile\*(C'\fR or
\&\f(CW\*(C`MYMETA.json\*(C'\fR. By default only CVE's newer than the recommended version per
dependency are reported.
.PP
cpansa
.IX Subsection "cpansa"
.PP
Pass the URL of the CPANSA database. The alternative is to pass the filename
of a stored version of that database.
.PP
make_pl
.IX Subsection "make_pl"
.PP
Pass an alternative location of \f(CW\*(C`Makefile.PL\*(C'\fR. Default is the one in the
current directory.
.PP
In version \f(CW0.01\fR \f(CW\*(C`Build.PL\*(C'\fR is not yet supported.
.PP
cpanfile
.IX Subsection "cpanfile"
.PP
Pass an alternative location for \f(CW\*(C`cpanfile\*(C'\fR. Very useful when testing.
.PP
want
.IX Subsection "want"
.PP
A list of extra prereqs.
.PP
\fItest\fR
.IX Subsection "test"
.PP
Execute the test. Files are read as needed.
.PP
\fIreport\fR
.IX Subsection "report"
.PP
Report the test-results in plain text. This method prints the CVE's. If you
want the results for further analysis, use \f(CW\*(C`cve\*(C'\fR.
.PP
\fIcve\fR
.IX Subsection "cve"
.PP
Return a list of found CVE's per release. The format will be somewhat like
.PP
.Vb 10
\& [ { release => "Some\-Module",
\&     cve     => [
\&       { av  => [ "<1.23" ],
\&         cid => "CPANSA\-Some\-Module\-2023\-01",
\&         cve => [ "CVE\-2023\-1234" ],
\&         dsc => "Removes all files in /tmp",
\&         dte => "2023\-01\-02",
\&         sev => "critical",
\&         },
\&       ...
\&       ],
\&     },
\&   ...
\&   ]
.Ve
.PP
release
.IX Subsection "release"
.PP
The name of the release
.PP
cve
.IX Subsection "cve"
.PP
The list of found CVE's for this release that match the criteria
.IP av 2
.IX Item "av"
All affected versions of the release
.IP cid 2
.IX Item "cid"
The ID from the CPANSA database
.IP cve 2
.IX Item "cve"
The list of CVE tags for this item. This list can be empty.
.IP dsc 2
.IX Item "dsc"
Description of the vulnerability
.IP dte 2
.IX Item "dte"
Date for this CVE
.IP sev 2
.IX Item "sev"
Severity. Most entries doe not have a severity
.SH AUTHOR
.IX Header "AUTHOR"
H.Merijn Brand \fI<hmbrand@cpan.org>\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
.Vb 1
\& Copyright (C) 2023\-2023 H.Merijn Brand.  All rights reserved.
.Ve
.PP
This library is free software;  you can redistribute and/or modify it under
the same terms as Perl itself.
